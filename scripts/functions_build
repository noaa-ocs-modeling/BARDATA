#!/bin/bash-*-Shell-script-functions*-

###########################################################################
### Author:  Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
###
### Version - 1.1
###
###   1.1 Sun Mar 08 2022
###   1.0 Mon Nov 16 2020
###########################################################################

set +u

###====================
# Make sure that the current working directory is in the PATH
[[ ! :$PATH: == *:".":* ]] && export PATH="${PATH}:."

# Get the directory where the script is located
if [[ $(uname -s) == Darwin ]]; then
  src_name="$( grealpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
  src_dir="$(cd "$(dirname "${src_name}" )" && pwd -P)"
else
  src_name="$( realpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
  src_dir="$(cd "$(dirname "${src_name}" )" && pwd -P)"
fi

lst="${src_dir:+${src_dir}/}functions_utilities ${src_dir:+${src_dir}/}scripts/functions_utilities functions_utilities"
funcs=
for ilst in ${lst}
do
  if [ -f "${ilst:-}" ]; then
    funcs="${ilst}"
    break
  fi
done

if [ -n "${funcs:+1}" ]; then
  source "${funcs}"

  if [ $? -ne 0 ]; then
    echo " ### ERROR :: in ${src_name}"
    echo "     Cannot load the required file: ${funcs}"
    echo "     Exiting now ..."
    echo

    unset src_name src_dir ilst funcs
    return 1
  fi
else
  echo " ### ERROR :: in ${src_name}"
  echo "     Cannot load the required file: functions_utilities"
  echo "     Exiting now ..."
  echo

  unset src_name src_dir ilst funcs
  return 1
fi

unset src_name src_dir ilst funcs
###====================


export MY_COMPILING_SYTEMS="gnu, intel, pgi"
export MY_COMPILER_DEFAULT="intel"

export MY_COMPONENT_DEFAULT="ogcmdl"
export MY_COMPONENT_LIST="ogcmdl nuopc"


##################################################
### BEG:: MODELLING SYSTEM BUILD FUNCTIONS
##################################################

###========================================
### ParseArgs()
### Usage:      ParseArgs args
### Parameters: args = the script options
### Returns:    0
### Echoes:     NONE
###
### Gets the supplied options to the script.
###========================================
ParseArgs()
{
  local nm_func=$( basename ${BASH_SOURCE[${#BASH_SOURCE[@]}-1]} )

  local opt_all opt_opt opt_arg opt_chk

  local t_VAR
  local ans0 ans ival intN
  local all_evars

  all_evars="MY_CLEAN MY_ADD_CMAKE_FLAGS MY_COMPILER MY_COMPONENT
             MY_PARALLEL MY_PARMAKE MY_INSTALL_DIR MY_TYPE MY_VERBOSE"

  for ival in ${all_evars}; do unset __${ival}; done


  __MY_CLEAN=0
  __MY_ADD_CMAKE_FLAGS=
  __MY_COMPILER="${MY_COMPILER_DEFAULT}"
  __MY_COMPONENT="${MY_COMPONENT_DEFAULT}" 
  __MY_PARALLEL=0
  __MY_PARMAKE=1
  __MY_INSTALL_DIR=
  __MY_TYPE=R
  __MY_VERBOSE=
          

  # -----
  # Process the function options
  opt_all=( c clean cmake_flags compiler component j par parallel prefix t type v verbose
            h help )
  opt_all=":$( echo "${opt_all[@]/#/-} ${opt_all[@]/#/--}" | sed 's/ /:/g' ):"

  unset __OPTION_LIST
  while test $# -gt 0; do
    case "${1}" in
      -[^-]*=* | --[^-]*=* )
        opt_opt="$( toLOWER "$( echo "${1}" | sed 's/=.*//' )" )"
        len=$(( ${#opt_opt} + 1 ))
        opt_arg="$( strTrim "$( echo "${1:${len}}" )" 2 )"
        [ "$( echo "${opt_all}" | egrep -o ":${opt_arg}:" )" ] && \
          opt_arg=
        ;;
      -[^-]* | --[^-]* )
        opt_opt="$( toLOWER "${1}" )"
        opt_chk="$( toLOWER "$( echo "${2}" | sed 's/=.*//' )" )"
        if [ "$( echo "${opt_all}" | egrep -o ":${opt_chk}:" )" ]; then
          opt_arg=
        else
          opt_arg="$( strTrim "$( echo "${2}" )" )"
        fi
        ;;
      *)
        opt_opt=
        opt_arg=
        ;;
    esac

    case "${opt_opt}" in
      -c | --c | -clean | --clean )
          checkFuncOpt "--clean"
          if [ $? -eq 0 ]; then
            __MY_CLEAN=1
            if [ "X${opt_arg}" != "X" ]; then
              if `isInteger "${opt_arg}"` ; then
                __MY_CLEAN=$( echo "${opt_arg}" )
                [ ${opt_arg} -le -1 ] && __MY_CLEAN=-1
                [ ${opt_arg} -ge  1 ] && __MY_CLEAN=1
              else
                __MY_CLEAN=0
                [ "$( getYesNo "${opt_arg}" )" = "yes" ] && __MY_CLEAN=1
              fi
            fi
          fi
        ;;
      -cmake_flags | --cmake_flags )
          checkFuncOpt "--cmake_flags"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_ADD_CMAKE_FLAGS="$( echo "${opt_arg}" )"
            fi
          fi
        ;;
      -compiler | --compiler )
          checkFuncOpt "--compiler"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_COMPILER="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
              __MY_COMPILER="$( toLOWER ${__MY_COMPILER} )"
            fi
          fi
        ;;
      -component | --component )
          checkFuncOpt "--component"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_COMPONENT="$( strTrim "${opt_arg}" )"
            fi
          fi
        ;;
      -j | --j )
          checkFuncOpt "--j"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_PARMAKE=1
              t_VAR="$( getPosInteger "${opt_arg}" )"
              [ ! -z "${t_VAR}" ] && __MY_PARMAKE=${t_VAR}
            fi
          fi
        ;;
      -par | --par | -parallel | --parallel )
          checkFuncOpt "--parallel"
          if [ $? -eq 0 ]; then
            __MY_PARALLEL=1
            if [ "X${opt_arg}" != "X" ]; then
              if `isInteger "${opt_arg}"` ; then
                __MY_PARALLEL=0
                [ ${opt_arg} -ge 1 ] && __MY_PARALLEL=1
              else
                __MY_PARALLEL=0
                [ "$( getYesNo "${opt_arg}" )" = "yes" ] && __MY_PARALLEL=1
              fi
            fi
          fi
        ;;
      -prefix | --prefix )
          checkFuncOpt "--prefix"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_INSTALL_DIR="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
            fi
          fi
        ;;
      -t | --t | -type | --type )
          checkFuncOpt "--type"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              __MY_TYPE="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
              __MY_TYPE="$( toUPPER ${__MY_TYPE} )"
            fi
          fi
        ;;
      -v | --v | -verbose | --verbose )
          checkFuncOpt "--verbose"
          if [ $? -eq 0 ]; then
            __MY_VERBOSE=b # This is suitable for GNU's make
            if [ "X${opt_arg}" != "X" ]; then
            __MY_VERBOSE="$( echo "$( strTrim "${opt_arg}" 2 )" | sed 's/[[:space:]]/,/g' )"
            fi
          fi
        ;;
      -h | -help | --h | --help )
          UsageBuild ${nm_func}
        ;;
      *) ;; # DEFAULT
    esac
    shift
    opt_opt= 
    opt_arg=
  done
  unset __OPTION_LIST
  # -----

  case "${__MY_TYPE}" in
     "D") ;; # Do nothing
     "R") ;; # Do nothing
    "RD") ;; # Do nothing
    "MR") ;; # Do nothing
    *) echo "Wrong CMake type ${__MY_TYPE}, should be one of [D, R, RD, MR]"
       exit 1
       ;;
  esac

  # Export the values of all __* variables.
  for ival in ${all_evars}
  do
    ans0="$( eval "echo \${$(echo ${ival}):-}" )"
    ans="$( eval "echo \${$(echo __${ival}):-}" )"
    ans=${ans:-${ans0:-}}

    eval "${ival}=\${ans}"
    export ${ival}

    unset __${ival}
  done

  return 0
}

###========================================
### UsageBuild()
###
### Usage:      UsageBuild
###
### Parameters: NONE
###
### Returns : Exits on error
###
### Exports : NONE
###
### Echoes  : NONE
###
### UsageBuild: Prints all usage options of the build script.
###========================================
UsageBuild()
{
  local nm="$( basename ${0} )"

  echo
  echo "Usage: \"${nm}\" [{-|--}option1{=|space}[option_value1]] [{-|--}option2{=|space}[option_value2]] ..."
  echo

  echo "  -h|-help|--h|--help"
  echo "    Show this help screen."
  echo
  #---
  echo "  -c|--c|-clean|--clean [=|space] \"0|1|2|-3|-2|-1|yes|no\" (OPTIONAL)."
  echo "    Only clean the already compiled CMake build system."
  echo "    Default: 0|no."
  echo "    Example: --clean=1   Clean the system (make clean) and exit."
  echo "                    =-1  During the compilation stage, clean the system (make clean)"
  echo "                         and continue with the compilation."
  echo "                    =0   Do not clean anything (default)."
  echo
  #---
  echo "  -cmake_flags|--cmake_flags [=|space] \"cmake_flags\" (OPTIONAL)."
  echo "    Additional flags to pass to the cmake program."
  echo "    Example: --cmake_flags=\"-DFLAG1=VAL1 -DFLAG2=VAL2 ...\"."
  echo "    Default: none."
  echo
  #---
  echo "  -compiler|--compiler [=|space] \"compiling_system\" (OPTIONAL)."
  echo "    The compiling system to use (${MY_COMPILING_SYTEMS})."
  echo "    Default: ${MY_COMPILER_DEFAULT}."
  echo
  #---
  echo "  -component|--component [=|space] \"component_list\" (OPTIONAL)."
  echo "    The component(s) to use (${MY_COMPONENT_LIST})."
  echo "    Default: \"${MY_COMPONENT_DEFAULT}\"."
  echo
  #---
  echo "  -j|--j [=|space] \"N\" (OPTIONAL)."
  echo "    Define the number of make jobs to run simultaneously."
  echo "    Default: 1."
  echo
  #---
  echo "  -par|--par|-parallel|--parallel [=|space] \"0|1|yes|no\" (OPTIONAL)."
  echo "    Activate the use of parallel compilers."
  echo "    Default: 0|no."
  echo
  #---
  echo "  -prefix|--prefix [=|space] \"install_dir\" (OPTIONAL)."
  echo "    The path to the installation directory."
  echo "    Default: The location of this script."
  echo
  #---
  echo "  -t|--t|-type|--type [=|space] \"cmake_build_type\" (OPTIONAL)."
  echo "    To set the CMAKE_BUILD_TYPE option (Debug Release RelWithDebInfo MinSizeRel)."
  echo "       D = Debug."
  echo "       R = Release."
  echo "      RD = RelWithDebInfo."
  echo "      MR = MinSizeRel."
  echo "    Default: R."
  echo
  #---
  echo "  -v|--v|-verbose|--verbose [=|space] \"a,b,v,i,j,m,n\" (any combination, OPTIONAL)."
  echo "    Enable verbosity in the make files during compilation."
  echo "      a (all)      : all types of debugging output are enabled"
  echo "      n (none)     : disable all debugging currently enabled"
  echo "      b (basic)    : basic debugging and whether the build was successful or not"
  echo "      v (verbose)  : a level above basic"
  echo "      i (implicit) : prints messages describing the implicit rule searches for each target"
  echo "      j (jobs)     : prints messages giving details on the invocation of specific sub-commands"
  echo "      m (makefile) : enables messages while rebuilding makefiles"
  echo "    Default:none."
  echo
  #---

  exit 0
}

###========================================
### getEnvVars()
###
### Usage:      getEnvVars
###
### Parameters: NONE
###
### Returns : error status
###
### Exports : CLEAN ADD_CMAKE_FLAGS COMPILER COMPONENT PARALLEL PARMAKE
###           INSTALL_DIR TYPE VERBOSE
###
### Echoes  : NONE
###
### getEnvVars: Exports all the environment variables required by the build script.
###========================================
getEnvVars()
{
  local src_name src_dir


  if [ -n "${APP_DIR:+1}" ]; then
    src_dir="${APP_DIR}"
  else
    if [ -n "${1:+1}" ]; then
      src_dir="${1}"
    else
      # Get the directory where the script is located
      if [[ $(uname -s) == Darwin ]]; then
        src_name="$( grealpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
        src_dir="$(cd "$(dirname "${src_name}" )" && pwd -P)"
      else
        src_name="$( realpath -s "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}" )"
        src_dir="$(cd "$(dirname "${src_name}" )" && pwd -P)"
      fi
    fi
  fi
  APP_DIR=${src_dir}


  CLEAN=${MY_CLEAN}
  export CLEAN=${CLEAN:-0}

  COMPILER="$( toLOWER "$( basename "${MY_COMPILER}" )" )"
  export COMPILER=${COMPILER:-}

  COMPONENT="$( toUPPER "${MY_COMPONENT}" )"
  export COMPONENT=${COMPONENT:-}

  PARALLEL=${MY_PARALLEL}
  export PARALLEL=${PARALLEL:-0}

  ADD_CMAKE_FLAGS=${MY_ADD_CMAKE_FLAGS}
  export ADD_CMAKE_FLAGS="${ADD_CMAKE_FLAGS:-}"

  PARMAKE=${MY_PARMAKE}
  export PARMAKE=${PARMAKE:-1}

  VERBOSE="$( toLOWER "${MY_VERBOSE}" )"
  export VERBOSE=${VERBOSE:-}

  INSTALL_DIR=${MY_INSTALL_DIR}
  export INSTALL_DIR=${INSTALL_DIR:-}

  # Get the CMake build type
  TYPE="$( toUPPER "${MY_TYPE}" )"
  export ${TYPE:-R}

  case "${TYPE}" in
     D) export OPT_TYPE="Debug"          ;;
     R) export OPT_TYPE="Release"        ;;
    RD) export OPT_TYPE="RelWithDebInfo" ;;
    RD) export OPT_TYPE="MinSizeRel"     ;;
     *) export OPT_TYPE="Release"        ;;
  esac
}

###========================================
### checkComponents()
###
### Usage:      checkComponents
###
### Parameters: NONE
###
### Returns : Exits on error
###
### Exports : NONE
###
### Echoes  : NONE
###
### checkComponents: Checks if a user supplied modeling component is supported.
###========================================
checkComponents() {
  local comp_user comp_all
  local icomp

  comp_user="$( toUPPER "${COMPONENT}" )"
  [ -z "${comp_user}" ] && \
    comp_user="$( toUPPER "${MY_COMPONENT}" )"

  comp_all="$( toUPPER "${MY_COMPONENT_LIST}" )"

  for icomp in ${comp_user}
  do
    if [[ "${comp_all}" != *"${icomp}"* ]]; then
      echo "The modeling component \"${icomp}\" is not supported."
      echo "Please adjust your component list and re-run the script."
      echo "Exiting ..."
      exit 1
      echo "icomp = ${icomp}"
    fi
  done
}

###========================================
### compileNUOPC()
###
### Usage:      compileNUOPC compile_type
###
### Parameters: compile_type = one of: clean|distclean or, build|compile
###
### Returns : error status
###
### Exports : NONE
###
### Echoes  : NONE
###
### compileNUOPC: Uses environment variables to compile a NUOPC application.
###========================================
compileNUOPC() {
  local cmp_type cmp_make cmp_verb cmp_mjob
  local err=0

  local prog_dir="nuopc"

  [ $# -eq 0 ] && return ${err}

  cmp_type="$( toLOWER "${1}" )"
  cmp_make=Makefile   # This is the top level NUOPC Makefile
  cmp_mjob="${PARMAKE:+-j ${PARMAKE}}"
  cmp_verb="${VERBOSE:+--debug=${VERBOSE}}"

  case "${cmp_type}" in
    "clean"|"distclean" )
      if [ -e "${prog_dir}/${cmp_make}" ]; then
        pushd ${prog_dir} >/dev/null 2>&1
          echo "compileNUOPC :: Cleaning: in ${prog_dir}"
          eval "make ${cmp_verb} -f ${cmp_make} ${cmp_type}"
          err=$?
        popd >/dev/null 2>&1
      fi
      ;;
    "build"|"compile" )
      if [ -e "${prog_dir}/${cmp_make}" ]; then
        pushd ${prog_dir} >/dev/null 2>&1
          eval "make ${cmp_verb} ${cmp_mjob} -f ${cmp_make} clean"
          err=$?
          eval "make ${cmp_verb} ${cmp_mjob} -f ${cmp_make}"
          err=$?
        popd >/dev/null 2>&1
        if [ ${err} -eq 0 ]; then
          echo "compileNUOPC :: Compiling: the compilation in ${prog_dir} was successeful"
        else
          echo "compileNUOPC :: Compiling: the compilation in ${prog_dir} failed"
        fi
      else
        echo "compileNUOPC :: Compiling: no ${cmp_make} found: ${cmp_make} = ${cmp_make}"
        err=1
      fi
      ;;
    * ) err=0 ;; # Do nothing
  esac

  return ${err}
}

###========================================
### compileOGCMDL()
###
### Usage:      compileOGCMDL compile_type
###
### Parameters: compile_type = one of: clean|distclean or, build|compile
###
### Returns : error status
###
### Exports : NONE
###
### Echoes  : NONE
###
### compileOGCMDL: Uses environment variables to compile a OGCMDL application.
###========================================
compileOGCMDL() {
  local cmp_type cmp_make cmp_verb cmp_mjob
  local cmake_verb make_verb
  local err=0

  local prog_lib_dirs="datetime-fortran GSW-Fortran"
  local prog_dir="OC-GTSM"


  [ $# -eq 0 ] && return ${err}

  cmp_type="$( toLOWER "${1}" )"
  cmp_make=Makefile
  cmp_mjob="${PARMAKE:+-j ${PARMAKE}}"


  make_verb="$( getGNUMakeVerbosity "${VERBOSE}" )"
  make_verb="${make_verb:+--debug=${make_verb}}"

  cmake_verb="${VERBOSE:+-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON}"


  case "${cmp_type}" in
    "clean"|"distclean" )
      # This part is for the libraries that use CMake
      for idir in ${prog_lib_dirs}
      do
        if [ -d "${idir}/build" ]; then
          echo "compileOGCMDL :: Cleaning: removing ${idir}/build"
          rm -rf ${idir}/build
          err=$?
        else
          echo "compileOGCMDL :: Cleaning: ${idir} is clean"
          err=0
        fi
      done
      # This part is for the "ogcmdl" program
      if [ -e "${prog_dir}/${cmp_make}" ]; then
        pushd ${prog_dir} >/dev/null 2>&1
          echo "compileOGCMDL :: Cleaning: in ${prog_dir}"
          eval "make ${make_verb} -f ${cmp_make} ${cmp_type}"
          err=$?
        popd >/dev/null 2>&1
      fi
      ;;
    "build"|"compile" )
      # This part is for the libraries that use CMake
      for idir in ${prog_lib_dirs}
      do
        if [ -d "${idir}" ]; then
          [ -f ${idir}/build/CMakeCache.txt ] && \
            rm -f ${idir}/build/CMakeCache.txt

          eval "cmake -S ${idir} -B ${idir}/build ${CMAKE_FLAGS} ${cmake_verb}"
          err=$?
          if [ ${err} -eq 0 ]; then
            eval "cmake  --build ${idir}/build"
            err=$?
          fi
        fi
        if [ ${err} -eq 0 ]; then
          echo "compileOGCMDL :: Compile: the compilation in ${idir} was successeful"
        else
          echo "compileOGCMDL :: Compile: the compilation in ${idir} failed (see error log)"
        fi
      done
      # This part is for the "ogcmdl" program
      if [ -e "${prog_dir}/${cmp_make}" ]; then
        pushd ${prog_dir} >/dev/null 2>&1
          eval "make ${make_verb} -f ${cmp_make} clean"
          err=$?
          eval "make ${make_verb} ${cmp_mjob} -f ${cmp_make} F90=${PF90}" # We require a parallel compiler here
          err=$?
        popd >/dev/null 2>&1
      fi
      if [ ${err} -eq 0 ]; then
        echo "compileOGCMDL :: Compile: the compilation in ${prog_dir} was successeful"
      else
        echo "compileOGCMDL :: Compile: the compilation in ${prog_dir} failed"
      fi
      ;;
    * ) err=0 ;; # Do nothing
  esac

  return ${err}
}

##################################################
### END:: MODELLING SYSTEM BUILD FUNCTIONS
##################################################
